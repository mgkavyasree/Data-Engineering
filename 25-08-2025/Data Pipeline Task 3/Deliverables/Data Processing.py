# -*- coding: utf-8 -*-
"""data_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LbfCUZIO_X8z2ow1lAmL5wTyzpALgZzt
"""

# Mount Drive
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import os
from datetime import datetime
import numpy as np
from google.colab import files

# -------------------------------
# Step 0: Ensure data folder exists
# -------------------------------
os.makedirs('data', exist_ok=True)

# -------------------------------
# Step 1: Load raw CSV
# -------------------------------
raw_csv_path = '/content/drive/MyDrive/raw_sales_data.csv'
df = pd.read_csv(raw_csv_path, on_bad_lines='skip')
print(f"ðŸ“„ Raw rows: {len(df)}")

# -------------------------------
# Step 2: Normalize column names
# -------------------------------
df.columns = [col.strip().lower() for col in df.columns]

# -------------------------------
# Step 3: Trim spaces in text columns
# -------------------------------
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].str.strip()

# -------------------------------
# Step 4: Convert empty strings to NaN
# -------------------------------
df.replace('', np.nan, inplace=True)

# -------------------------------
# Step 5: Parse Date column
# -------------------------------
DATE_FORMATS = ["%d-%m-%Y", "%Y/%m/%d", "%b %d, %Y", "%d-%m-%y", "%B %d, %Y"]

def parse_date(x):
    x = str(x).strip()
    for fmt in DATE_FORMATS:
        try:
            return datetime.strptime(x, fmt)
        except:
            continue
    return pd.NaT

if 'date' in df.columns:
    df['date'] = df['date'].apply(parse_date)
    df.loc[df['date'].notna(), 'date'] = df.loc[df['date'].notna(), 'date'].dt.strftime('%Y-%m-%d')

# -------------------------------
# Step 6: Remove rows with missing values
# -------------------------------
df_clean = df.dropna()
print(f"âœ… Cleaned rows: {len(df_clean)}")

# -------------------------------
# Step 7: Save raw and cleaned CSV
# -------------------------------
df.to_csv('data/raw_sales_data.csv', index=False)       # raw (unchanged)
df_clean.to_csv('data/clean_sales_data.csv', index=False)  # cleaned

print("âœ… Data processing completed. Files saved in 'data/' folder.")

# -------------------------------
# Step 8: Download cleaned CSV
# -------------------------------
files.download('data/clean_sales_data.csv')

# Download the "clean_sales_data.csv"
files.download('data/clean_sales_data.csv')